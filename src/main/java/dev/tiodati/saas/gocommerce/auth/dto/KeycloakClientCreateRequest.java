package dev.tiodati.saas.gocommerce.auth.dto;

import java.util.List;
import java.util.Map;

/**
 * Request DTO for creating a Keycloak client.
 * This is a simplified DTO based on Keycloak's ClientRepresentation.
 *
 * @param clientId                  The client identifier
 * @param name                      The client display name
 * @param description               The client description
 * @param secret                    The client secret (handle securely)
 * @param standardFlowEnabled       Whether standard flow is enabled
 * @param directAccessGrantsEnabled Whether direct access grants are enabled
 * @param serviceAccountsEnabled    Whether service accounts are enabled
 * @param publicClient              Whether the client is public
 * @param redirectUris              List of valid redirect URIs
 * @param webOrigins                List of valid web origins
 * @param attributes                Additional attributes for the client (e.g.,
 *                                  PKCE settings)
 */
public record KeycloakClientCreateRequest(
        String clientId,
        String name,
        String description,
        String secret,
        boolean standardFlowEnabled,
        boolean directAccessGrantsEnabled,
        boolean serviceAccountsEnabled,
        boolean publicClient,
        List<String> redirectUris,
        List<String> webOrigins,
        Map<String, String> attributes) {
    /**
     * Factory method for creating a standard confidential client.
     */
    public static KeycloakClientCreateRequest confidentialClient(
            String clientId,
            String name,
            List<String> redirectUris,
            List<String> webOrigins) {
        return new KeycloakClientCreateRequest(
                clientId,
                name,
                null, // description
                null, // secret - will be generated by Keycloak
                true, // standardFlowEnabled
                true, // directAccessGrantsEnabled
                false, // serviceAccountsEnabled
                false, // publicClient
                redirectUris,
                webOrigins,
                Map.of() // empty attributes
        );
    }
}

// Copilot: This file may have been generated or refactored by GitHub Copilot.
